version: "3.9"

services:
  postgresql:
    image: postgres:14.2
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - cqrs
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=microservices
      - POSTGRES_HOST=5432
    command: -p 5432
    volumes:
      - pg_data:/var/lib/postgresql/data

  mongodb:
    image: docker.io/bitnami/mongodb:4.4
    restart: always
    environment:
      BITNAMI_DEBUG: "false"
      ALLOW_EMPTY_PASSWORD: "yes"
      MONGODB_SYSTEM_LOG_VERBOSITY: "0"
      MONGODB_DISABLE_SYSTEM_LOG: "no"
      MONGODB_DISABLE_JAVASCRIPT: "no"
      MONGODB_ENABLE_JOURNAL: "yes"
      MONGODB_ENABLE_IPV6: "no"
      MONGODB_ENABLE_DIRECTORY_PER_DB: "no"
      MONGODB_DATABASE: "microservices"
      MONGODB_USERNAME: "admin"
      MONGODB_PASSWORD: "admin"
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - cqrs

#  redis:
#    image: redis:6-alpine
#    restart: always
#    ports:
#      - "6379:6379"
#    networks:
#      - cqrs

  zookeeper:
    image: 'bitnami/zookeeper:3.8.0'
    ports:
      - '2181:2181'
    networks:
      - cqrs
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper:/zookeeper

  kafka:
    image: 'bitnami/kafka:3.1.1'
    ports:
      - "9092:9092"
      - "9093:9093"
    networks:
      - cqrs
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
#      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - cqrs

  jaeger:
    restart: always
    image: jaegertracing/all-in-one:latest
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "16686:16686" # Jaeger UI
      - "14269:14269" # Admin port
      - "14250:14250" # Receive from external otel-collector
    networks:
      - cqrs
    depends_on:
      - prometheus

  otel_collector:
    restart: always
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - "./monitoring/otel/otel-collector-connector-config.yml:/etc/otelcol/otel-collector-config.yml"
    command: --config /etc/otelcol/otel-collector-config.yml
    ports:
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    networks:
      - cqrs
    depends_on:
      - jaeger

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9101:9100"
    networks:
      - cqrs

  elasticsearch:
    image: docker.io/elastic/elasticsearch:7.16.3
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - cqrs

  logstash:
    image: docker.io/elastic/logstash:7.16.3
    volumes:
      - ./monitoring/logstash/gelf.conf:/usr/share/logstash/pipeline/gelf.conf:ro
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "9600:9600"
    networks:
      - cqrs
    depends_on:
      - elasticsearch

  grafana:
    restart: always
    image: grafana/grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana/provisioning/dashboards/:/etc/grafana/provisioning/dashboards/
    ports:
      - '3005:3000'
    networks:
      - cqrs
    depends_on:
      - prometheus
      - jaeger
      - elasticsearch
      - node_exporter

#  kibana:
#    image: docker.io/elastic/kibana:7.16.3
#    ports:
#      - "5601:5601"
#    networks:
#      - cqrs
#    depends_on:
#      - elasticsearch

volumes:
  pg_data:
  kafka_data:
  mongodb_data:
  zookeeper:
  grafana_data:
  jaeger_data:
  prometheus_data:

networks:
  cqrs:
    driver: bridge
